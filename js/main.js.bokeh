function rand(n) {
    var ret = Array(n);
    for (i = 0; i < n; i++)
        ret[i] = Math.random();
    return ret;
}

function linspace(start, stop, num) {
    var res = new Array(num);
    var step = (stop - start) / (num - 1);
    for (var i = 0; i < num; i++) {
        res[i] = start + i * step;
    }
    return res;
}

function histogram(data, bins=50) {
    var min = Math.min.apply(null, data);
    var max = Math.max.apply(null, data);
    var hist = Array(bins).fill(0);
    var edges = Array(bins + 1);
    for (var i = 0; i < data.length; i++) {
        hist[Math.min(bins-1, Math.floor((data[i] - min) / (max - min) * bins))]++;
    }
    hist = hist.map(function(h) { return bins * h / data.length / (max - min); });
    for (var i = 0; i <= bins; i++)
        edges[i] = min + i * (max - min) / bins;
    return {
        hist: hist,
        edges: edges
    };
}

// num_steps = 10000
var num_runs = 10000;
// var num_runs = 10;
// num_runs = 1000
var X_init = linspace(-10.0, 10.0, num_runs);
// X_init = np.full(num_runs, -8.0)
// min_interval = 50
var min_interval = 0;
var max_interval = 1000;
var interval = max_interval;


function Z() {
    return rand(num_runs).map(function(x) { return x - 0.5; });
}

function H(x, z) {
    // return -x + z
    return _.zipWith(x, z, function(x, z) {
        return 0.5 - 1 / (1 + Math.exp(-x)) + z;
    });
}

function gamma(n) {
    // return 1 / n ** 0.8
    return 3 / n;
}

var x = linspace(-10, 10, 100);
var y = H(x, Array(100).fill(0));
// X = np.full(num_runs, -5.0)
var X = X_init;
var play = true;
var step = 1;

var res = histogram(X, 50);
var plt = Bokeh.Plotting;
var p1 = plt.figure({x_range: [-10, 10], y_range: [-0.7, 0.7]});
// p1.add_tools(ResizeTool());
var r1 = p1.line(x, y, {color:"navy"});
// var h1 = p1.quad({source: source, top: 'hist', bottom:0, left:'left', right: 'right', fill_color: "#036564", line_color: "#033649", alpha: 0.5});
var h1 = p1.quad({top: res.hist, bottom:0, left:res.edges.slice(0, -1), right: res.edges.slice(1), fill_color: "#036564", line_color: "#033649", alpha: 0.5});
console.log(h1.data_source.data);

var p2 = plt.figure();
var h2 = p2.quad({top: res.hist, bottom:0, left:res.edges.slice(0, -1), right: res.edges.slice(1), fill_color: "#036564", line_color: "#033649", alpha: 0.5});

// plt.show(new Bokeh.Row({children: [p1, p2]}));
var doc = new Bokeh.Document();
// doc.add_root(new Bokeh.Row({children: [p1, p2]}));
doc.add_root(p1);
var div = document.getElementById("plotdiv");
Bokeh.embed.add_document_standalone(doc, div);
var updateId, redrawId;

function drawIteration(i) {
    $("#iteration").text(i);
}

function update() {
    X = _.zipWith(X, H(X, Z()), function(x, h) { return x + gamma(step) * h; });
    // drawIteration(step);
    console.log(step);
    step += 1;
    // updateId = window.setTimeout(update, interval);
}

function redrawPlot() {
    var res = histogram(X, 50);
    // source.data = { top: res.hist, left: res.edges.slice(0, -1), right: res.edges.slice(1)};
    h1.data_source.data = { top: res.hist, left: res.edges.slice(0, -1), right: res.edges.slice(1)};
    res = histogram(X.map(function(x) {
        return Math.sqrt(step) * x;
    }), 50);
    h2.data_source.data = { top: res.hist, left: res.edges.slice(0, -1), right: res.edges.slice(1)};
}


while (true)
    update();

updateId = window.setTimeout(update, 0);

redrawId = window.setInterval(redrawPlot, 1000);

$("#playpause").change(function() {
    if ($("#play").is(":checked")) {
        if (! play) {
            updateId = window.setTimeout(update, 0);
            redrawId = window.setInterval(redrawPlot, 2000);
            play = true;
        }
    } else {
        play = false;
        window.clearTimeout(updateId);
        window.clearInterval(redrawId);
    }
});

$("#speed-slider").slider().on("change", function(o) {
    $("#speed-label").text(Math.round(o.value.newValue));
    interval = (10 * max_interval - min_interval + o.value.newValue * (min_interval - max_interval)) / 9;
});

$("#reset").click(function() {
    step = 1;
    X = X_init;
    drawIteration(0);
    redrawPlot();
});

